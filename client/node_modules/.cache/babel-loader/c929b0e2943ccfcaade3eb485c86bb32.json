{"ast":null,"code":"var _jsxFileName = \"D:\\\\Github\\\\Crown-Clothing\\\\client\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React, { useEffect } from 'react';\nimport { Route } from 'react-router-dom'; // import { createStructuredSelector } from 'reselect';\n\nimport { connect } from 'react-redux';\nimport CollectionsOverviewContainer from '../../components/collections-overview/collection-overview.container';\nimport CollectionPageContainer from '../collection/collection.container'; // import { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n\nimport { fetchCollectionsStart } from '../../redux/shop/shop.actions'; // import WithSpinner from '../../components/with-spinner/with-spinner.component';\n// const CollectionsOverviewWithSpinner = WithSpinner(CollectionOverview);\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nconst ShopPage = ({\n  fetchCollectionsStart,\n  match\n}) => {\n  useEffect(() => {\n    fetchCollectionsStart();\n  }, [fetchCollectionsStart]);\n  /*\r\n  state = {\r\n      loading: true\r\n  };\r\n  */\n  // unsubscribeFromSnapshot = null;\n\n  /*\r\n  componentDidMount() {\r\n      \r\n      const { updateCollections } = this.props;\r\n      const collectionRef = firestore.collection('collections');\r\n        fetch('https://firestore.googleapis.com/v1/projects/crwn-db-256bb/databases/(default)/documents/collections')\r\n          .then(response => response.json())\r\n          .then(collection => console.log(collection));\r\n        collectionRef.get().then(snapshot => {\r\n          const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n          updateCollections(collectionsMap);\r\n          this.setState({ loading: false });\r\n      });\r\n     fetchCollectionsStart();\r\n  }\r\n    // const { loading } = this.state;\r\n  return (\r\n      <div className='shop-page'>\r\n          <Route exact path={`${match.path}`} render={(props) => <CollectionsOverviewWithSpinner isLoading={isCollectionFething} {...props} />} />\r\n          <Route path={`${match.path}/:collectionId`} render={(props) => <CollectionPageWithSpinner isLoading={!isCollectionsLoaded} {...props} />} />\r\n      </div>\r\n  );\r\n  */\n\n  return React.createElement(\"div\", {\n    className: \"shop-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: `${match.path}`,\n    component: CollectionsOverviewContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: `${match.path}/:collectionId`,\n    component: CollectionPageContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  // updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["D:/Github/Crown-Clothing/client/src/pages/shop/shop.component.jsx"],"names":["React","useEffect","Route","connect","CollectionsOverviewContainer","CollectionPageContainer","fetchCollectionsStart","ShopPage","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,kBAAtB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,4BAAP,MAAyC,qEAAzC;AACA,OAAOC,uBAAP,MAAoC,oCAApC,C,CACA;;AACA,SAASC,qBAAT,QAAsC,+BAAtC,C,CACA;AAEA;AACA;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAED,EAAAA,qBAAF;AAAyBE,EAAAA;AAAzB,CAAD,KAAsC;AACnDP,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,qBAAqB;AACxB,GAFQ,EAEN,CAACA,qBAAD,CAFM,CAAT;AAGA;;;;;AAMA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,SACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AACI,IAAA,KAAK,MADT;AAEI,IAAA,IAAI,EAAG,GAAEE,KAAK,CAACC,IAAK,EAFxB;AAGI,IAAA,SAAS,EAAEL,4BAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAKI,oBAAC,KAAD;AACI,IAAA,IAAI,EAAG,GAAEI,KAAK,CAACC,IAAK,gBADxB;AAEI,IAAA,SAAS,EAAEJ,uBAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADJ;AAWH,CAjDD;;AAmDA,MAAMK,kBAAkB,GAAGC,QAAQ,KAAK;AACpC;AACAL,EAAAA,qBAAqB,EAAE,MAAMK,QAAQ,CAACL,qBAAqB,EAAtB;AAFD,CAAL,CAAnC;;AAKA,eAAeH,OAAO,CAAC,IAAD,EAAOO,kBAAP,CAAP,CAAkCH,QAAlC,CAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Route } from 'react-router-dom';\r\n// import { createStructuredSelector } from 'reselect';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CollectionsOverviewContainer from '../../components/collections-overview/collection-overview.container';\r\nimport CollectionPageContainer from '../collection/collection.container';\r\n// import { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\nimport { fetchCollectionsStart } from '../../redux/shop/shop.actions';\r\n// import WithSpinner from '../../components/with-spinner/with-spinner.component';\r\n\r\n// const CollectionsOverviewWithSpinner = WithSpinner(CollectionOverview);\r\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\nconst ShopPage = ({ fetchCollectionsStart, match }) => {\r\n    useEffect(() => {\r\n        fetchCollectionsStart();\r\n    }, [fetchCollectionsStart]);\r\n    /*\r\n    state = {\r\n        loading: true\r\n    };\r\n    */\r\n\r\n    // unsubscribeFromSnapshot = null;\r\n\r\n    /*\r\n    componentDidMount() {\r\n        \r\n        const { updateCollections } = this.props;\r\n        const collectionRef = firestore.collection('collections');\r\n\r\n        fetch('https://firestore.googleapis.com/v1/projects/crwn-db-256bb/databases/(default)/documents/collections')\r\n            .then(response => response.json())\r\n            .then(collection => console.log(collection));\r\n\r\n        collectionRef.get().then(snapshot => {\r\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n            updateCollections(collectionsMap);\r\n            this.setState({ loading: false });\r\n        });\r\n       fetchCollectionsStart();\r\n    }\r\n\r\n    // const { loading } = this.state;\r\n    return (\r\n        <div className='shop-page'>\r\n            <Route exact path={`${match.path}`} render={(props) => <CollectionsOverviewWithSpinner isLoading={isCollectionFething} {...props} />} />\r\n            <Route path={`${match.path}/:collectionId`} render={(props) => <CollectionPageWithSpinner isLoading={!isCollectionsLoaded} {...props} />} />\r\n        </div>\r\n    );\r\n    */\r\n    return (\r\n        <div className='shop-page'>\r\n            <Route \r\n                exact \r\n                path={`${match.path}`} \r\n                component={CollectionsOverviewContainer} />\r\n            <Route \r\n                path={`${match.path}/:collectionId`} \r\n                component={CollectionPageContainer} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    // updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\r\n    fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}