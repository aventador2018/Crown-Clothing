{"ast":null,"code":"import _defineProperty from\"D:\\\\Github\\\\Crown-Clothing\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"D:\\\\Github\\\\Crown-Clothing\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"D:\\\\Github\\\\Crown-Clothing\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"D:\\\\Github\\\\Crown-Clothing\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"D:\\\\Github\\\\Crown-Clothing\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{connect}from'react-redux';import FormInput from'../form-input/form-input.component';import CustomButton from'../custom-button/custom-button.component';// import { auth, signInWithGoogle } from '../../firebase/firebase.utils';\nimport'./sign-in.styles.scss';import{googleSignInStart as _googleSignInStart,emailSignInStart as _emailSignInStart}from'../../redux/user/user.actions';var SignIn=function SignIn(_ref){var emailSignInStart=_ref.emailSignInStart,googleSignInStart=_ref.googleSignInStart;var _useState=useState({email:'',password:''}),_useState2=_slicedToArray(_useState,2),userCredentials=_useState2[0],setCredentials=_useState2[1];var email=userCredentials.email,password=userCredentials.password;var handleSubmit=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:event.preventDefault();emailSignInStart(email,password);/*\r\n        try {\r\n            await auth.signInWithEmailAndPassword(email, password);\r\n            this.setState({ email: '', password: '' });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        this.setState({\r\n            email: '',\r\n            password: ''\r\n        });\r\n        */case 2:case\"end\":return _context.stop();}}},_callee);}));return function handleSubmit(_x){return _ref2.apply(this,arguments);};}();var handleChange=function handleChange(event){var _event$target=event.target,value=_event$target.value,name=_event$target.name;setCredentials(_objectSpread({},userCredentials,_defineProperty({},name,value)));};return React.createElement(\"div\",{className:\"sign-in\"},React.createElement(\"h2\",null,\"I already have an account\"),React.createElement(\"span\",null,\"Sign in with your email and password\"),React.createElement(\"form\",{onSubmit:handleSubmit},React.createElement(FormInput,{name:\"email\",type:\"email\",handleChange:handleChange,value:email,label:\"email\",required:true}),React.createElement(FormInput,{name:\"password\",type:\"password\",value:password,handleChange:handleChange,label:\"password\",required:true}),React.createElement(\"div\",{className:\"buttons\"},React.createElement(CustomButton,{type:\"submit\"},\"SIGN IN\"),React.createElement(CustomButton,{type:\"button\",onClick:googleSignInStart,isGoogleSignIn:true},\"SIGN IN WITH GOOGLE\"))));};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{googleSignInStart:function googleSignInStart(){return dispatch(_googleSignInStart());},emailSignInStart:function emailSignInStart(email,password){return dispatch(_emailSignInStart({email:email,password:password}));}};};export default connect(null,mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["D:/Github/Crown-Clothing/client/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","connect","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignIn","email","password","userCredentials","setCredentials","handleSubmit","event","preventDefault","handleChange","target","value","name","mapDispatchToProps","dispatch"],"mappings":"oxBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,OAAT,KAAwB,aAAxB,CAEA,MAAOC,CAAAA,SAAP,KAAsB,oCAAtB,CACA,MAAOC,CAAAA,YAAP,KAAyB,0CAAzB,CAEA;AAEA,MAAO,uBAAP,CACA,OAASC,iBAAiB,GAAjBA,CAAAA,kBAAT,CAA4BC,gBAAgB,GAAhBA,CAAAA,iBAA5B,KAAoD,+BAApD,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,MAA6C,IAA1CD,CAAAA,gBAA0C,MAA1CA,gBAA0C,CAAxBD,iBAAwB,MAAxBA,iBAAwB,eACdJ,QAAQ,CAAC,CAC/CO,KAAK,CAAE,EADwC,CAE/CC,QAAQ,CAAE,EAFqC,CAAD,CADM,wCACjDC,eADiD,eAChCC,cADgC,kBAMhDH,CAAAA,KANgD,CAM5BE,eAN4B,CAMhDF,KANgD,CAMzCC,QANyC,CAM5BC,eAN4B,CAMzCD,QANyC,CAQxD,GAAMG,CAAAA,YAAY,2FAAG,iBAAMC,KAAN,kHACjBA,KAAK,CAACC,cAAN,GAEAR,gBAAgB,CAACE,KAAD,CAAQC,QAAR,CAAhB,CAEA;;;;;;;;;;;;UALiB,sDAAH,kBAAZG,CAAAA,YAAY,6CAAlB,CAoBA,GAAMG,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAF,KAAK,CAAI,mBACFA,KAAK,CAACG,MADJ,CAClBC,KADkB,eAClBA,KADkB,CACXC,IADW,eACXA,IADW,CAG1BP,cAAc,kBACPD,eADO,oBAETQ,IAFS,CAEFD,KAFE,GAAd,CAIH,CAPD,CASA,MACI,4BAAK,SAAS,CAAC,SAAf,EACI,0DADJ,CAEI,uEAFJ,CAII,4BAAM,QAAQ,CAAEL,YAAhB,EACI,oBAAC,SAAD,EACI,IAAI,CAAC,OADT,CAEI,IAAI,CAAC,OAFT,CAGI,YAAY,CAAEG,YAHlB,CAII,KAAK,CAAEP,KAJX,CAKI,KAAK,CAAC,OALV,CAMI,QAAQ,KANZ,EADJ,CAQI,oBAAC,SAAD,EACI,IAAI,CAAC,UADT,CAEI,IAAI,CAAC,UAFT,CAGI,KAAK,CAAEC,QAHX,CAII,YAAY,CAAEM,YAJlB,CAKI,KAAK,CAAC,UALV,CAMI,QAAQ,KANZ,EARJ,CAgBI,2BAAK,SAAS,CAAC,SAAf,EACI,oBAAC,YAAD,EAAc,IAAI,CAAC,QAAnB,YADJ,CAEI,oBAAC,YAAD,EAAc,IAAI,CAAC,QAAnB,CAA4B,OAAO,CAAEV,iBAArC,CAAwD,cAAc,KAAtE,wBAFJ,CAhBJ,CAJJ,CADJ,CA4BH,CAjED,CAmEA,GAAMc,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,QAAQ,QAAK,CACpCf,iBAAiB,CAAE,mCAAMe,CAAAA,QAAQ,CAACf,kBAAiB,EAAlB,CAAd,EADiB,CAEpCC,gBAAgB,CAAE,0BAACE,KAAD,CAAQC,QAAR,QAAqBW,CAAAA,QAAQ,CAACd,iBAAgB,CAAC,CAAEE,KAAK,CAALA,KAAF,CAASC,QAAQ,CAARA,QAAT,CAAD,CAAjB,CAA7B,EAFkB,CAAL,EAAnC,CAKA,cAAeP,CAAAA,OAAO,CAAC,IAAD,CAAOiB,kBAAP,CAAP,CAAkCZ,MAAlC,CAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport FormInput from '../form-input/form-input.component';\r\nimport CustomButton from '../custom-button/custom-button.component';\r\n\r\n// import { auth, signInWithGoogle } from '../../firebase/firebase.utils';\r\n\r\nimport './sign-in.styles.scss';\r\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\r\n\r\nconst SignIn = ({ emailSignInStart, googleSignInStart }) => {\r\n    const [userCredentials, setCredentials] = useState({\r\n        email: '',\r\n        password: ''\r\n    });\r\n\r\n    const { email, password } = userCredentials;\r\n\r\n    const handleSubmit = async event => {\r\n        event.preventDefault();\r\n\r\n        emailSignInStart(email, password);\r\n\r\n        /*\r\n        try {\r\n            await auth.signInWithEmailAndPassword(email, password);\r\n            this.setState({ email: '', password: '' });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        this.setState({\r\n            email: '',\r\n            password: ''\r\n        });\r\n        */\r\n    }\r\n\r\n    const handleChange = event => {\r\n        const { value, name } = event.target;\r\n\r\n        setCredentials({\r\n            ...userCredentials,\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className='sign-in'>\r\n            <h2>I already have an account</h2>\r\n            <span>Sign in with your email and password</span>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <FormInput \r\n                    name=\"email\" \r\n                    type=\"email\" \r\n                    handleChange={handleChange} \r\n                    value={email}\r\n                    label=\"email\" \r\n                    required/>\r\n                <FormInput \r\n                    name=\"password\" \r\n                    type=\"password\" \r\n                    value={password}\r\n                    handleChange={handleChange}\r\n                    label=\"password\" \r\n                    required/>\r\n\r\n                <div className=\"buttons\">\r\n                    <CustomButton type=\"submit\">SIGN IN</CustomButton>\r\n                    <CustomButton type=\"button\" onClick={googleSignInStart} isGoogleSignIn>SIGN IN WITH GOOGLE</CustomButton>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    googleSignInStart: () => dispatch(googleSignInStart()),\r\n    emailSignInStart: (email, password) => dispatch(emailSignInStart({ email, password }))\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}