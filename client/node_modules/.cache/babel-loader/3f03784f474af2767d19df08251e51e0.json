{"ast":null,"code":"var _jsxFileName = \"D:\\\\Github\\\\Crown-Clothing\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom'; // import { createStructuredSelector } from 'reselect';\n\nimport { connect } from 'react-redux';\nimport CollectionsOverviewContainer from '../../components/collections-overview/collection-overview.container';\nimport CollectionPageContainer from '../collection/collection.container'; // import { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions'; // import WithSpinner from '../../components/with-spinner/with-spinner.component';\n// const CollectionsOverviewWithSpinner = WithSpinner(CollectionOverview);\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    /*\r\n    const { updateCollections } = this.props;\r\n    const collectionRef = firestore.collection('collections');\r\n      fetch('https://firestore.googleapis.com/v1/projects/crwn-db-256bb/databases/(default)/documents/collections')\r\n        .then(response => response.json())\r\n        .then(collection => console.log(collection));\r\n      collectionRef.get().then(snapshot => {\r\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n        updateCollections(collectionsMap);\r\n        this.setState({ loading: false });\r\n    });\r\n    */\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    fetchCollectionsStartAsync();\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionsLoaded\n    } = this.props; // const { loading } = this.state;\n\n    /*\r\n    return (\r\n        <div className='shop-page'>\r\n            <Route exact path={`${match.path}`} render={(props) => <CollectionsOverviewWithSpinner isLoading={isCollectionFething} {...props} />} />\r\n            <Route path={`${match.path}/:collectionId`} render={(props) => <CollectionPageWithSpinner isLoading={!isCollectionsLoaded} {...props} />} />\r\n        </div>\r\n    );\r\n    */\n\n    return React.createElement(\"div\", {\n      className: \"shop-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      component: CollectionsOverviewContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      component: CollectionPageContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }));\n  }\n\n}\n\n;\n\nconst mapDispatchToProps = dispatch => ({\n  // updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["D:/Github/Crown-Clothing/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","CollectionsOverviewContainer","CollectionPageContainer","fetchCollectionsStartAsync","ShopPage","Component","unsubscribeFromSnapshot","componentDidMount","props","render","match","isCollectionsLoaded","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,4BAAP,MAAyC,qEAAzC;AACA,OAAOC,uBAAP,MAAoC,oCAApC,C,CACA;;AACA,SAASC,0BAAT,QAA2C,+BAA3C,C,CACA;AAEA;AACA;;AAEA,MAAMC,QAAN,SAAuBN,KAAK,CAACO,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAOnCC,uBAPmC,GAOT,IAPS;AAAA;;AASnCC,EAAAA,iBAAiB,GAAG;AAChB;;;;;;;;;;;;AAcD,UAAM;AAAEJ,MAAAA;AAAF,QAAiC,KAAKK,KAA5C;AACAL,IAAAA,0BAA0B;AAC5B;;AAEDM,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAiC,KAAKH,KAA5C,CADK,CAEL;;AACA;;;;;;;;;AAQA,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AACI,MAAA,KAAK,MADT;AAEI,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACE,IAAK,EAFxB;AAGI,MAAA,SAAS,EAAEX,4BAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAKI,oBAAC,KAAD;AACI,MAAA,IAAI,EAAG,GAAES,KAAK,CAACE,IAAK,gBADxB;AAEI,MAAA,SAAS,EAAEV,uBAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ;AAWH;;AAlDkC;;AAmDtC;;AAED,MAAMW,kBAAkB,GAAGC,QAAQ,KAAK;AACpC;AACAX,EAAAA,0BAA0B,EAAE,MAAMW,QAAQ,CAACX,0BAA0B,EAA3B;AAFN,CAAL,CAAnC;;AAKA,eAAeH,OAAO,CAAC,IAAD,EAAOa,kBAAP,CAAP,CAAkCT,QAAlC,CAAf","sourcesContent":["import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n// import { createStructuredSelector } from 'reselect';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CollectionsOverviewContainer from '../../components/collections-overview/collection-overview.container';\r\nimport CollectionPageContainer from '../collection/collection.container';\r\n// import { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions';\r\n// import WithSpinner from '../../components/with-spinner/with-spinner.component';\r\n\r\n// const CollectionsOverviewWithSpinner = WithSpinner(CollectionOverview);\r\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\nclass ShopPage extends React.Component {\r\n    /*\r\n    state = {\r\n        loading: true\r\n    };\r\n    */\r\n\r\n    unsubscribeFromSnapshot = null;\r\n\r\n    componentDidMount() {\r\n        /*\r\n        const { updateCollections } = this.props;\r\n        const collectionRef = firestore.collection('collections');\r\n\r\n        fetch('https://firestore.googleapis.com/v1/projects/crwn-db-256bb/databases/(default)/documents/collections')\r\n            .then(response => response.json())\r\n            .then(collection => console.log(collection));\r\n\r\n        collectionRef.get().then(snapshot => {\r\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n            updateCollections(collectionsMap);\r\n            this.setState({ loading: false });\r\n        });\r\n        */\r\n       const { fetchCollectionsStartAsync } = this.props;\r\n       fetchCollectionsStartAsync();\r\n    }\r\n\r\n    render() {\r\n        const { match, isCollectionsLoaded } = this.props;\r\n        // const { loading } = this.state;\r\n        /*\r\n        return (\r\n            <div className='shop-page'>\r\n                <Route exact path={`${match.path}`} render={(props) => <CollectionsOverviewWithSpinner isLoading={isCollectionFething} {...props} />} />\r\n                <Route path={`${match.path}/:collectionId`} render={(props) => <CollectionPageWithSpinner isLoading={!isCollectionsLoaded} {...props} />} />\r\n            </div>\r\n        );\r\n        */\r\n        return (\r\n            <div className='shop-page'>\r\n                <Route \r\n                    exact \r\n                    path={`${match.path}`} \r\n                    component={CollectionsOverviewContainer} />\r\n                <Route \r\n                    path={`${match.path}/:collectionId`} \r\n                    component={CollectionPageContainer} />\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    // updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\r\n    fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}