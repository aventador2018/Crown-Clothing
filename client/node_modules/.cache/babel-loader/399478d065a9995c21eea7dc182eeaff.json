{"ast":null,"code":"import React,{useEffect}from'react';import{Route}from'react-router-dom';// import { createStructuredSelector } from 'reselect';\nimport{connect}from'react-redux';import CollectionsOverviewContainer from'../../components/collections-overview/collection-overview.container';import CollectionPageContainer from'../collection/collection.container';// import { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport{fetchCollectionsStart as _fetchCollectionsStart}from'../../redux/shop/shop.actions';// import WithSpinner from '../../components/with-spinner/with-spinner.component';\n// const CollectionsOverviewWithSpinner = WithSpinner(CollectionOverview);\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage);\nvar ShopPage=function ShopPage(_ref){var fetchCollectionsStart=_ref.fetchCollectionsStart,match=_ref.match;useEffect(function(){fetchCollectionsStart();},[fetchCollectionsStart]);/*\r\n    state = {\r\n        loading: true\r\n    };\r\n    */ // unsubscribeFromSnapshot = null;\n/*\r\n    componentDidMount() {\r\n        \r\n        const { updateCollections } = this.props;\r\n        const collectionRef = firestore.collection('collections');\r\n\r\n        fetch('https://firestore.googleapis.com/v1/projects/crwn-db-256bb/databases/(default)/documents/collections')\r\n            .then(response => response.json())\r\n            .then(collection => console.log(collection));\r\n\r\n        collectionRef.get().then(snapshot => {\r\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n            updateCollections(collectionsMap);\r\n            this.setState({ loading: false });\r\n        });\r\n       fetchCollectionsStart();\r\n    }\r\n\r\n    // const { loading } = this.state;\r\n    return (\r\n        <div className='shop-page'>\r\n            <Route exact path={`${match.path}`} render={(props) => <CollectionsOverviewWithSpinner isLoading={isCollectionFething} {...props} />} />\r\n            <Route path={`${match.path}/:collectionId`} render={(props) => <CollectionPageWithSpinner isLoading={!isCollectionsLoaded} {...props} />} />\r\n        </div>\r\n    );\r\n    */return React.createElement(\"div\",{className:\"shop-page\"},React.createElement(Route,{exact:true,path:\"\".concat(match.path),component:CollectionsOverviewContainer}),React.createElement(Route,{path:\"\".concat(match.path,\"/:collectionId\"),component:CollectionPageContainer}));};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{// updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\nfetchCollectionsStart:function fetchCollectionsStart(){return dispatch(_fetchCollectionsStart());}};};export default connect(null,mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["D:/Github/Crown-Clothing/client/src/pages/shop/shop.component.jsx"],"names":["React","useEffect","Route","connect","CollectionsOverviewContainer","CollectionPageContainer","fetchCollectionsStart","ShopPage","match","path","mapDispatchToProps","dispatch"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,KAAT,KAAsB,kBAAtB,CACA;AACA,OAASC,OAAT,KAAwB,aAAxB,CAEA,MAAOC,CAAAA,4BAAP,KAAyC,qEAAzC,CACA,MAAOC,CAAAA,uBAAP,KAAoC,oCAApC,CACA;AACA,OAASC,qBAAqB,GAArBA,CAAAA,sBAAT,KAAsC,+BAAtC,CACA;AAEA;AACA;AAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAsC,IAAnCD,CAAAA,qBAAmC,MAAnCA,qBAAmC,CAAZE,KAAY,MAAZA,KAAY,CACnDP,SAAS,CAAC,UAAM,CACZK,qBAAqB,GACxB,CAFQ,CAEN,CAACA,qBAAD,CAFM,CAAT,CAGA;;;;MAJmD,CAUnD;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;MA0BA,MACI,4BAAK,SAAS,CAAC,WAAf,EACI,oBAAC,KAAD,EACI,KAAK,KADT,CAEI,IAAI,WAAKE,KAAK,CAACC,IAAX,CAFR,CAGI,SAAS,CAAEL,4BAHf,EADJ,CAKI,oBAAC,KAAD,EACI,IAAI,WAAKI,KAAK,CAACC,IAAX,kBADR,CAEI,SAAS,CAAEJ,uBAFf,EALJ,CADJ,CAWH,CAjDD,CAmDA,GAAMK,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,QAAQ,QAAK,CACpC;AACAL,qBAAqB,CAAE,uCAAMK,CAAAA,QAAQ,CAACL,sBAAqB,EAAtB,CAAd,EAFa,CAAL,EAAnC,CAKA,cAAeH,CAAAA,OAAO,CAAC,IAAD,CAAOO,kBAAP,CAAP,CAAkCH,QAAlC,CAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Route } from 'react-router-dom';\r\n// import { createStructuredSelector } from 'reselect';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CollectionsOverviewContainer from '../../components/collections-overview/collection-overview.container';\r\nimport CollectionPageContainer from '../collection/collection.container';\r\n// import { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\nimport { fetchCollectionsStart } from '../../redux/shop/shop.actions';\r\n// import WithSpinner from '../../components/with-spinner/with-spinner.component';\r\n\r\n// const CollectionsOverviewWithSpinner = WithSpinner(CollectionOverview);\r\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\nconst ShopPage = ({ fetchCollectionsStart, match }) => {\r\n    useEffect(() => {\r\n        fetchCollectionsStart();\r\n    }, [fetchCollectionsStart]);\r\n    /*\r\n    state = {\r\n        loading: true\r\n    };\r\n    */\r\n\r\n    // unsubscribeFromSnapshot = null;\r\n\r\n    /*\r\n    componentDidMount() {\r\n        \r\n        const { updateCollections } = this.props;\r\n        const collectionRef = firestore.collection('collections');\r\n\r\n        fetch('https://firestore.googleapis.com/v1/projects/crwn-db-256bb/databases/(default)/documents/collections')\r\n            .then(response => response.json())\r\n            .then(collection => console.log(collection));\r\n\r\n        collectionRef.get().then(snapshot => {\r\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n            updateCollections(collectionsMap);\r\n            this.setState({ loading: false });\r\n        });\r\n       fetchCollectionsStart();\r\n    }\r\n\r\n    // const { loading } = this.state;\r\n    return (\r\n        <div className='shop-page'>\r\n            <Route exact path={`${match.path}`} render={(props) => <CollectionsOverviewWithSpinner isLoading={isCollectionFething} {...props} />} />\r\n            <Route path={`${match.path}/:collectionId`} render={(props) => <CollectionPageWithSpinner isLoading={!isCollectionsLoaded} {...props} />} />\r\n        </div>\r\n    );\r\n    */\r\n    return (\r\n        <div className='shop-page'>\r\n            <Route \r\n                exact \r\n                path={`${match.path}`} \r\n                component={CollectionsOverviewContainer} />\r\n            <Route \r\n                path={`${match.path}/:collectionId`} \r\n                component={CollectionPageContainer} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    // updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\r\n    fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}